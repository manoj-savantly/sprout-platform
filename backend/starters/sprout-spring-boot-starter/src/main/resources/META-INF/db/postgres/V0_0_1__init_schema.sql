create table IF NOT EXISTS APP_EMAIL_ADDRESS (
   item_id VARCHAR(42) not null,
    TENANT_ID varchar(255) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    emailAddress varchar(255),
    IS_PRIMARY boolean,
    verified boolean not null,
    user_item_id VARCHAR(42),
    user_TENANT_ID varchar(255),
    primary key (item_id, TENANT_ID)
);

create table IF NOT EXISTS APP_ORGANIZATION (
   id VARCHAR(36) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    name varchar(255),
    tenantId varchar(255),
    primary key (id)
);

create table IF NOT EXISTS app_persistent_audit_event (
   event_id bigint generated by default as identity,
    event_date timestamp,
    event_type varchar(255),
    principal varchar(255) not null,
    primary key (event_id)
);

create table IF NOT EXISTS APP_USER_EMAIL_ADDRESS (
   SproutUserEntity_item_id VARCHAR(42) not null,
    SproutUserEntity_TENANT_ID varchar(255) not null,
    emailAddresses_item_id VARCHAR(42) not null,
    emailAddresses_TENANT_ID varchar(255) not null,
    primary key (SproutUserEntity_item_id, SproutUserEntity_TENANT_ID, emailAddresses_item_id, emailAddresses_TENANT_ID)
);

create table IF NOT EXISTS app_users (
   item_id VARCHAR(42) not null,
    TENANT_ID varchar(255) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    accountNonExpired boolean not null,
    accountNonLocked boolean not null,
    credentialsNonExpired boolean not null,
    displayName varchar(255),
    enabled boolean not null,
    firstName varchar(255),
    hidePrimaryEmailAddress boolean not null,
    lastName varchar(255),
    password varchar(60),
    phoneNumber varchar(255),
    username varchar(255),
    organization_id VARCHAR(36),
    primary key (item_id, TENANT_ID)
);

create table IF NOT EXISTS DASHBOARD_LINKS (
   Dashboard_id varchar(255) not null,
    Dashboard_ITEM_VERSION bigint not null,
    href varchar(255),
    target varchar(255),
    title varchar(255),
    index_id integer not null,
    primary key (Dashboard_id, Dashboard_ITEM_VERSION, index_id)
);

create table IF NOT EXISTS DASHBOARD_PANELS (
   Dashboard_id varchar(255) not null,
    Dashboard_ITEM_VERSION bigint not null,
    h integer not null,
    w integer not null,
    x integer not null,
    y integer not null,
    id integer not null,
    options varchar(64000),
    pluginVersion varchar(255),
    title varchar(255),
    transparent boolean not null,
    panel_type varchar(255),
    index_id integer not null,
    primary key (Dashboard_id, Dashboard_ITEM_VERSION, index_id)
);

create table IF NOT EXISTS DASHBOARD_TAGS (
   Dashboard_id varchar(255) not null,
    Dashboard_ITEM_VERSION bigint not null,
    tags varchar(255),
    index_id integer not null,
    primary key (Dashboard_id, Dashboard_ITEM_VERSION, index_id)
);

create table IF NOT EXISTS DASHBOARDS (
   id varchar(255) not null,
    ITEM_VERSION bigint not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    TENANT_ID varchar(255),
    deleted boolean not null,
    editable boolean not null,
    folder varchar(255),
    hideControls boolean not null,
    schemaVersion bigint not null,
    title varchar(255),
    primary key (id, ITEM_VERSION)
);

create table IF NOT EXISTS feed_comment (
   item_id VARCHAR(42) not null,
    TENANT_ID varchar(255) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    feedItemId varchar(255),
    text varchar(5000),
    primary key (item_id, TENANT_ID)
);

create table IF NOT EXISTS feed_post (
   item_id VARCHAR(42) not null,
    TENANT_ID varchar(255) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    body varchar(5000),
    primary key (item_id, TENANT_ID)
);

create table IF NOT EXISTS FeedPost_tags (
   FeedPost_item_id VARCHAR(42) not null,
    FeedPost_TENANT_ID varchar(255) not null,
    tags varchar(255)
);

create table IF NOT EXISTS files (
   id VARCHAR(36) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    TENANT_ID varchar(255),
    bytes bytea,
    childrenCount bigint not null,
    color varchar(255),
    contentType varchar(255),
    icon varchar(255),
    isDir boolean not null,
    modDate timestamp,
    name varchar(255),
    parent varchar(255),
    size bigint not null,
    thumbnailUrl varchar(255),
    primary key (id)
);


create table IF NOT EXISTS Folder (
   item_id VARCHAR(42) not null,
    TENANT_ID varchar(255) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    icon varchar(255),
    name varchar(255),
    parent varchar(255),
    primary key (item_id, TENANT_ID)
);

create table IF NOT EXISTS Issue_tags (
   Issue_item_id VARCHAR(42) not null,
    Issue_TENANT_ID varchar(255) not null,
    tags varchar(255)
);

create table IF NOT EXISTS issues (
   item_id VARCHAR(42) not null,
    TENANT_ID varchar(255) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    issueId varchar(255),
    text varchar(5000),
    description varchar(5000),
    status integer,
    title varchar(255),
    primary key (item_id, TENANT_ID)
);

create table IF NOT EXISTS issues_issues (
   Issue_item_id VARCHAR(42) not null,
    Issue_TENANT_ID varchar(255) not null,
    comments_item_id VARCHAR(42) not null,
    comments_TENANT_ID varchar(255) not null,
    primary key (Issue_item_id, Issue_TENANT_ID, comments_item_id, comments_TENANT_ID)
);

create table IF NOT EXISTS MENU (
   id VARCHAR(36) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    TENANT_ID varchar(255),
    _public boolean not null,
    disabled boolean not null,
    displayText varchar(255),
    icon varchar(255),
    name varchar(255),
    parentName varchar(255),
    position integer not null,
    url varchar(255),
    primary key (id)
);

create table IF NOT EXISTS MENU_ROLES (
   Menu_id VARCHAR(36) not null,
    roles varchar(255)
);

create table IF NOT EXISTS persistent_audit_evt_data (
   event_id bigint not null,
    value varchar(255),
    name varchar(255) not null,
    primary key (event_id, name)
);

create table IF NOT EXISTS PluginConfigurationEntity (
   item_id VARCHAR(42) not null,
    TENANT_ID varchar(255) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    jsonData varchar(255),
    secureJsonData varchar(255),
    primary key (item_id, TENANT_ID)
);

create table IF NOT EXISTS Privilege (
   id VARCHAR(36) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    TENANT_ID varchar(255),
    name varchar(255),
    primary key (id)
);

create table IF NOT EXISTS Role (
   id VARCHAR(36) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    TENANT_ID varchar(255),
    name varchar(255),
    primary key (id)
);

create table IF NOT EXISTS Role_Privilege (
   Role_id VARCHAR(36) not null,
    privileges_id VARCHAR(36) not null,
    primary key (Role_id, privileges_id)
);

create table IF NOT EXISTS sprout_module_registration (
   id CHAR(100) not null,
    description varchar(255),
    enabled boolean not null,
    installed boolean not null,
    isPlugin boolean not null,
    name varchar(255),
    pluginJsonPath varchar(255),
    pluginType integer,
    version varchar(255),
    primary key (id)
);

create table IF NOT EXISTS TENANT (
   id VARCHAR(36) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    description varchar(255),
    primary key (id)
);

create table IF NOT EXISTS TenantEntity_aliases (
   TenantEntity_id VARCHAR(36) not null,
    aliases varchar(255)
);

create table IF NOT EXISTS UI_PROPERTIES (
   id VARCHAR(36) not null,
    createdBy varchar(255),
    createdDate timestamp,
    lastModifiedBy varchar(255),
    lastModifiedDate timestamp,
    version bigint,
    TENANT_ID varchar(255),
    name varchar(255),
    value varchar(255),
    requiredPrivilege_id VARCHAR(36),
    primary key (id)
);

create table IF NOT EXISTS user_roles (
   user_id VARCHAR(42) not null,
    user_tenant_id varchar(255) not null,
    roles_id VARCHAR(36) not null,
    primary key (user_id, user_tenant_id, roles_id)
);

alter table APP_USER_EMAIL_ADDRESS 
   add constraint UK_1i8bkjkxdjb9q46xwvonikwd8 unique (emailAddresses_item_id, emailAddresses_TENANT_ID);

alter table app_users 
   add constraint UK60o6p4pdoj2tuupbd6y8smwcy unique (username, TENANT_ID);

alter table files 
   add constraint UKo9racgrmlkfu9cmxeofsh13jl unique (TENANT_ID, name, parent);

alter table issues_issues 
   add constraint UK_m7n3w8r9savc148ni9c5dms1x unique (comments_item_id, comments_TENANT_ID);

alter table MENU 
   add constraint UKldby87m60spoygni5olvx5txr unique (TENANT_ID, name);

alter table APP_EMAIL_ADDRESS 
   add constraint FKr8pko96q9iq6k4qrcpshm9eyn 
   foreign key (user_item_id, user_TENANT_ID) 
   references app_users;

alter table APP_USER_EMAIL_ADDRESS 
   add constraint FKshhjjnsjvm5t7fegqv8t05qqk 
   foreign key (emailAddresses_item_id, emailAddresses_TENANT_ID) 
   references APP_EMAIL_ADDRESS;

alter table APP_USER_EMAIL_ADDRESS 
   add constraint FKn9t1dgn6o4eq9mruopr1wi75d 
   foreign key (SproutUserEntity_item_id, SproutUserEntity_TENANT_ID) 
   references app_users;

alter table app_users 
   add constraint FK3pg28g1cq66e219yi590o3l4m 
   foreign key (organization_id) 
   references APP_ORGANIZATION;

alter table DASHBOARD_LINKS 
   add constraint FK5f6xilpmolksttvptu8lq0uyx 
   foreign key (Dashboard_id, Dashboard_ITEM_VERSION) 
   references DASHBOARDS;

alter table DASHBOARD_PANELS 
   add constraint FK4mkfax4j58jn0q368t69n4pp7 
   foreign key (Dashboard_id, Dashboard_ITEM_VERSION) 
   references DASHBOARDS;

alter table DASHBOARD_TAGS 
   add constraint FKapkmpt6i6xyso1061l0naccgb 
   foreign key (Dashboard_id, Dashboard_ITEM_VERSION) 
   references DASHBOARDS;

alter table FeedPost_tags 
   add constraint FKiv3qrhp8crvit9ulahcvcctog 
   foreign key (FeedPost_item_id, FeedPost_TENANT_ID) 
   references feed_post;

alter table Issue_tags 
   add constraint FKn7ovf9geieippk4fudhtmt5od 
   foreign key (Issue_item_id, Issue_TENANT_ID) 
   references issues;

alter table issues_issues 
   add constraint FKgnp7niyg24gpvehx110s31o31 
   foreign key (comments_item_id, comments_TENANT_ID) 
   references issues;

alter table issues_issues 
   add constraint FK9mhobbsju5qiq0ma568d2qsin 
   foreign key (Issue_item_id, Issue_TENANT_ID) 
   references issues;

alter table MENU_ROLES 
   add constraint FKoxr7fc6rbtvlxcju9vlt2sgdh 
   foreign key (Menu_id) 
   references MENU;

alter table persistent_audit_evt_data 
   add constraint FK3kuydigdhhlxvwajobl45o0ep 
   foreign key (event_id) 
   references app_persistent_audit_event;

alter table Role_Privilege 
   add constraint FK1doaajt8shs4qv3y7scc3ipao 
   foreign key (privileges_id) 
   references Privilege;

alter table Role_Privilege 
   add constraint FKlc11r7a9hwn8471upun0jhqhd 
   foreign key (Role_id) 
   references ROLE;

alter table TenantEntity_aliases 
   add constraint FK52gloxy4ioo3nw74kou1grorq 
   foreign key (TenantEntity_id) 
   references TENANT;

alter table UI_PROPERTIES 
   add constraint FKl6id4gokwyhkiipy9tr6160u5 
   foreign key (requiredPrivilege_id) 
   references Privilege;

alter table user_roles 
   add constraint FKbcsalslurw33on7738rj3d8cp 
   foreign key (roles_id) 
   references ROLE;

alter table user_roles 
   add constraint FK4y73wrrbs05bqmk0h6s8uhxyi 
   foreign key (user_id, user_tenant_id) 
   references app_users;
